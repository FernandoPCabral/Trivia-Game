{"version":3,"sources":["Redux/Actions/index.js","Redux/Actions/ActionConst.js","Service/service.js","pages/Login.js","components/Header.js","components/Timer.js","pages/Game.js","pages/Settings.js","pages/Feedback.js","pages/Ranking.js","App.js","serviceWorker.js","Redux/Reducer/playerReducer.js","Redux/Reducer/tokenReducer.js","Redux/Reducer/timerReducer.js","Redux/Reducer/settingReducer.js","Redux/Reducer/rootReducer.js","Redux/Store/index.js","index.js","trivia.png"],"names":["PlayerAction","playerObject","type","payload","TokenAction","tokenString","TimerAction","number","ScoreAction","score","CategoryAction","id","DifficultyAction","string","TypeAction","getToken","a","fetch","data","json","response","token","getQuestions","category","difficulty","console","log","urlRequest","results","length","tokenTwo","urlRequestTwo","dataTwo","responseTwo","saveLocalStorage","propriedade","localStorage","setItem","JSON","stringify","getCategorys","Login","state","name","email","disabled","enableButton","includes","setState","handleChange","target","value","handleClick","tokenApi","props","dispatch","history","push","handleClickSettings","this","className","src","logo","alt","placeholder","data-testid","onChange","event","onClick","React","Component","connect","Header","gravatarEmail","MD5","globalState","player","gravatarURL","Timer","myInterval","stopTimer","clearInterval","time","setInterval","prevState","Game","resultsQuestions","counter","allQuestions","correctAnswer","isDisabled","isHidden","disabledBtnQuestions","arrayRandomOrder","array","i","j","Math","floor","random","createQuestions","arrayAllQuestions","counterIndex","map","element","clickAnswer","dangerouslySetInnerHTML","__html","sanitizeHtml","key","refreshButton","answer","answerClick","answers","document","querySelectorAll","respostaCorreta","querySelector","timer","classList","add","forEach","resposta","updateQuestions","correct_answer","incorrect_answers","clickNextQuestion","remove","disableButtons","ApiResult","question","hidden","setting","Settings","categorys","createSelectCategory","handleCategoryChange","handleDifficultyChange","handleTypeChange","trivia_categories","to","Feedback","messageNumberOfQuestions","correctAnswers","object","prevsArray","parse","getItem","saveLocalStorageRanking","picture","rightQuestions","assertions","Ranking","playersArray","players","sort","b","item","index","classname","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","playerReducer","action","tokenReducer","timerReducer","settingReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.d3ad0bcd.chunk.js","sourcesContent":["import { PLAYER_INFO, TOKEN_INFO, TIMER,\n  ADD_SCORE, RIGHT_QUESTIONS, RESET_SCORE,\n  ADD_CATEGORY, ADD_DIFFICULTY, ADD_TYPE } from './ActionConst';\n\nexport const PlayerAction = (playerObject) => ({\n  type: PLAYER_INFO,\n  payload: {\n    ...playerObject,\n  },\n});\n\nexport const TokenAction = (tokenString) => ({\n  type: TOKEN_INFO,\n  payload: `${tokenString}`,\n});\n\nexport const TimerAction = (number) => ({\n  type: TIMER,\n  payload: number,\n});\n\nexport const ScoreAction = (score) => ({\n  type: ADD_SCORE,\n  payload: {\n    score,\n  },\n});\n\nexport const RightQuestionsAction = () => ({\n  type: RIGHT_QUESTIONS,\n});\n\nexport const ResetAction = () => ({\n  type: RESET_SCORE,\n});\n\nexport const CategoryAction = (id) => ({\n  type: ADD_CATEGORY,\n  payload: id, \n});\n\nexport const DifficultyAction = (string) => ({\n  type: ADD_DIFFICULTY,\n  payload: string, \n});\n\nexport const TypeAction = (string) => ({\n  type: ADD_TYPE,\n  payload: string, \n});\n","export const PLAYER_INFO = 'PLAYER_INFO';\nexport const TOKEN_INFO = 'TOKEN_INFO';\nexport const MUDAR = 'MUDAR';\nexport const TIMER = 'TIMER';\nexport const ADD_SCORE = 'ADD_SCORE';\nexport const RIGHT_QUESTIONS = 'RIGTH_QUESTIONS';\nexport const RESET_SCORE = 'RESET_SCORE';\nexport const ADD_CATEGORY = 'ADD_CATEGORY';\nexport const ADD_DIFFICULTY = 'ADD_DIFFICULTY';\nexport const ADD_TYPE = 'ADD_TYPE';","// Consultas a API de Trívia\nimport md5 from 'crypto-js/md5';\n\nconst tokenURL = 'https://opentdb.com/api_token.php?command=request';\n\nexport const getToken = async () => {\n  const data = await fetch(tokenURL);\n  const response = await data.json();\n  return response.token;\n};\n\nexport const getQuestions = async (token,category,difficulty,type) => {\n  console.log(token)\n  const urlRequest = `https://opentdb.com/api.php?amount=5&category=${category}&difficulty=${difficulty}&type=${type}&token=${token}`;\n  const data = await fetch(urlRequest);\n  const response = await data.json();\n  console.log(response);\n  if (response.results.length === 0) {\n    console.log('entrou')\n    const tokenTwo = await getToken();\n    console.log(tokenTwo);\n    const urlRequestTwo = `https://opentdb.com/api.php?amount=5&category=${category}&difficulty=${difficulty}&type=${type}&token=${tokenTwo}`;\n    console.log(urlRequestTwo);\n    const dataTwo = await fetch(urlRequestTwo);\n    const responseTwo = await dataTwo.json();\n    return responseTwo;\n  }\n  return response;\n};\n\nexport const getGravatar = async (email) => {\n  const hash = md5(email).toString();\n  const gravatarURL = `https://www.gravatar.com/avatar/${hash}`;\n  const data = await fetch(gravatarURL);\n  return data.url;\n};\n\nexport const saveLocalStorage = (propriedade, string) => {\n  localStorage.setItem(propriedade, JSON.stringify(string));\n};\n\nexport const saveLocalStorageRanking = (object) => {\n  const prevsArray = JSON.parse(localStorage.getItem('ranking'));\n  if (!prevsArray) {\n    localStorage.setItem('ranking', JSON.stringify([object]));\n  } else {\n    localStorage.setItem('ranking', JSON.stringify([...prevsArray, object]));\n  }\n};\n\nexport const getCategorys= async () => {\n  const urlCategorys = 'https://opentdb.com/api_category.php';\n  const data = await fetch(urlCategorys);\n  const response = await data.json();\n  return response;\n};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport logo from '../trivia.png';\nimport '../App.css';\nimport { PlayerAction, TokenAction } from '../Redux/Actions';\nimport { getToken, saveLocalStorage } from '../Service/service';\nimport '../style/Login.css';\n\nclass Login extends React.Component {\n  state = {\n    name: '',\n    email: '',\n    disabled: true,\n  }\n\n  enableButton = async () => {\n    const minLengthName = 4;\n    const { email, name } = this.state;\n    const emailVerify = email.includes('@') && email.includes('.com');\n    if (emailVerify && name.length >= minLengthName) {\n      this.setState({\n        disabled: false,\n      });\n    } else {\n      this.setState({\n        disabled: true,\n      });\n    }\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, () => this.enableButton());\n  }\n\n  handleClick = async () => {\n    const tokenApi = await getToken();\n    const { dispatch, history } = this.props;\n    const { name, email } = this.state;\n    dispatch(PlayerAction({ name, email }));\n    dispatch(TokenAction(tokenApi));\n    saveLocalStorage('token', tokenApi);\n    history.push('/game');\n  }\n\n  handleClickSettings = async () => {\n    const tokenApi = await getToken();\n    const { dispatch, history } = this.props;\n    const { name, email } = this.state;\n    dispatch(PlayerAction({ name, email }));\n    dispatch(TokenAction(tokenApi));\n    saveLocalStorage('token', tokenApi);\n    history.push('/settings');\n  }\n\n  render() {\n    const { disabled, email, name } = this.state;\n    return (\n      <div className=\"login-container\">\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n        <form className=\"login-form\">\n          <input\n            className=\"form-inputs\"\n            value={ name }\n            name=\"name\"\n            type=\"text\"\n            placeholder=\"Nome\"\n            data-testid=\"input-player-name\"\n            onChange={ (event) => this.handleChange(event) }\n          />\n          <input\n            className=\"form-inputs\"\n            value={ email }\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"Email\"\n            data-testid=\"input-gravatar-email\"\n            onChange={ (event) => this.handleChange(event) }\n          />\n          <button\n            className=\"form-play button-login\"\n            onClick={ this.handleClick }\n            disabled={ disabled }\n            type=\"button\"\n            data-testid=\"btn-play\"\n          >\n            Play\n          </button>\n            <button onClick={ this.handleClickSettings } disabled={ disabled } className=\"settings-btn button-login form-settings\" data-testid=\"btn-settings\" type=\"button\">Settings</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect()(Login);\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App.css';\nimport MD5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport '../style/Header.css';\n\nclass Header extends Component {\n  render() {\n    const { name, gravatarEmail, score } = this.props;\n    return (\n      <header>\n        <div className=\"name-img-div\">\n          <h4 className=\"name-header\" data-testid=\"header-player-name\">{ name }</h4>\n          <img\n            data-testid=\"header-profile-picture\"\n            src={ `https://www.gravatar.com/avatar/${MD5(gravatarEmail)}` }\n            alt=\"GravatarImg\"\n            className=\"gravatarImg\"\n          />\n        </div>\n        <div className=\"score-header\">\n          <p>Score: </p>\n        <p\n          data-testid=\"header-score\"\n        >\n          {score}\n        </p>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (globalState) => ({\n  gravatarEmail: globalState.player.gravatarEmail,\n  name: globalState.player.name,\n  gravatarURL: globalState.player.gravatarURL,\n  score: globalState.player.score,\n});\n\nHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { TimerAction } from '../Redux/Actions/index';\nimport '../style/Timer.css';\n\nclass Timer extends Component {\n  constructor() {\n    super();\n    this.Timer = () => {};\n    this.state = {\n      time: 30,\n    };\n  }\n\n  componentDidMount() {\n    const interval = 1000;\n    this.Timer = setInterval(\n      () => this.setState((prevState) => ({ time: prevState.time - 1 })), interval,\n    );\n    return this.Timer;\n  }\n\n  componentDidUpdate() {\n    const { time } = this.state;\n    const { dispatch } = this.props;\n    if (time >= 0) {\n      dispatch(TimerAction(time));\n    } else {\n      return null;\n    }\n    this.myInterval();\n  }\n\n  myInterval = () => {\n    const { stopTimer } = this.props;\n    if (stopTimer) {\n      clearInterval(this.Timer);\n    }\n  }\n\n  render() {\n    const { time } = this.state;\n    const numberTime = -1;\n    return (\n      <div>\n        { time <= numberTime ? <h5 className=\"timer-text\">0</h5>\n          : (\n            <h5 className=\"timer-text\">\n              { time }\n            </h5>)}\n      </div>\n    );\n  }\n}\n\nTimer.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  stopTimer: PropTypes.bool.isRequired,\n};\n\nexport default connect()(Timer);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport sanitizeHtml from 'sanitize-html';\nimport { getQuestions, saveLocalStorage } from '../Service/service';\nimport Header from '../components/Header';\nimport './Game.css';\nimport Timer from '../components/Timer';\nimport { ScoreAction, TimerAction, RightQuestionsAction } from '../Redux/Actions/index';\n\nclass Game extends React.Component {\n  state = {\n    resultsQuestions: [],\n    counter: 0,\n    allQuestions: [],\n    correctAnswer: '',\n    isDisabled: true,\n    isHidden: true,\n    difficulty: '',\n    disabledBtnQuestions: false,\n    stopTimer: false,\n  }\n\n  async componentDidMount() {\n    const { token, category, type, difficulty } = this.props;\n    const ApiResult = await getQuestions(token, category, difficulty, type );\n    console.log(ApiResult);\n    const { counter } = this.state;\n    this.setState({\n      resultsQuestions: ApiResult.results,\n      correctAnswer: ApiResult.results[counter].correct_answer,\n      allQuestions: this.arrayRandomOrder(\n        [...ApiResult.results[counter].incorrect_answers,\n          ApiResult.results[counter].correct_answer,\n        ],\n      ),\n      difficulty: ApiResult.results[counter].difficulty,\n    });\n  }\n\n  componentDidUpdate() {\n    const { score } = this.props;\n    const soma = score;\n    saveLocalStorage('score', soma);\n  }\n  // https://pt.stackoverflow.com/questions/406037/mostrar-elementos-de-um-array-em-ordem-aleat%C3%B3ria usado para fazer a função ArrayRandomOrder\n\n  arrayRandomOrder = (array) => {\n    for (let i = array.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  createQuestions = (arrayAllQuestions, correctAnswer) => {\n    let counterIndex = 0 - 1;\n    const { disabledBtnQuestions } = this.state;\n    return arrayAllQuestions.map((element) => {\n      if (element === correctAnswer) {\n        return (\n          <button\n            type=\"button\"\n            className=\"respostaCorreta button-answer\"\n            data-testid=\"correct-answer\"\n            onClick={ (event) => { this.clickAnswer(element, event); } }\n            disabled={ disabledBtnQuestions }\n            dangerouslySetInnerHTML={ { __html: sanitizeHtml(element) } }\n          >\n            {}\n          </button>);\n      }\n      counterIndex += 1;\n\n      return (\n        <button\n          type=\"button\"\n          className=\"incorrectAnswer button-answer\"\n          data-testid={ `wrong-answer-${counterIndex}` }\n          onClick={ (event) => { this.clickAnswer(element, event); } }\n          key={ counterIndex }\n          disabled={ disabledBtnQuestions }\n          dangerouslySetInnerHTML={ { __html: sanitizeHtml(element) } }\n        >\n          {}\n        </button>);\n    });\n  };\n\n  refreshButton = () => {\n    const { counter } = this.state;\n    const counterNumerMaximo = 4;\n    if (counter <= counterNumerMaximo) {\n      this.setState({\n        isDisabled: false,\n        isHidden: false,\n      });\n    }\n  }\n\n  clickAnswer = (answer, event) => {\n    const { correctAnswer, difficulty } = this.state;\n    const answerClick = event.target;\n    const answers = document.querySelectorAll('.incorrectAnswer');\n    const respostaCorreta = document.querySelector('.respostaCorreta');\n    let score = 0;\n    const { timer, dispatch } = this.props;\n    if (answer === correctAnswer) {\n      console.log(respostaCorreta.classList)\n      dispatch(RightQuestionsAction());\n      answerClick.classList.add('correct');\n      answers.forEach((resposta) => { resposta.classList.add('incorrect'); });\n      let difficultPoints = 0;\n      const hardNumber = 3;\n      const mediumNumber = 2;\n      const easyNumber = 1;\n      if (difficulty === 'hard') {\n        difficultPoints = hardNumber;\n      } else if (difficulty === 'medium') {\n        difficultPoints = mediumNumber;\n      } else {\n        difficultPoints = easyNumber;\n      }\n      const scoreNumber = 10;\n      score = scoreNumber + (timer * difficultPoints);\n      dispatch(ScoreAction(score));\n    } else {\n      console.log(respostaCorreta.classList)\n      respostaCorreta.classList.add('correct');\n      answers.forEach((resposta) => { resposta.classList.add('incorrect'); });\n    }\n    this.refreshButton();\n    this.setState({ disabledBtnQuestions: true, stopTimer: true });\n  };\n\n  updateQuestions = () => {\n    const { resultsQuestions, counter } = this.state;\n    this.setState({ correctAnswer: resultsQuestions[counter].correct_answer,\n      allQuestions: this.arrayRandomOrder([...resultsQuestions[counter].incorrect_answers,\n        resultsQuestions[counter].correct_answer]),\n      difficulty: resultsQuestions[counter].difficulty,\n    });\n  }\n\n  clickNextQuestion = () => {\n    const answers = document.querySelectorAll('.incorrectAnswer');\n    const respostaCorreta = document.querySelector('.respostaCorreta');\n    respostaCorreta.classList.remove('correct');\n    answers.forEach((resposta) => {\n      resposta.classList.remove('incorrect');\n    });\n    const { counter } = this.state;\n    const questionsNumber = 4;\n    if (counter < questionsNumber) {\n      this.setState((prevState) => (\n        { counter: prevState.counter + 1 }\n      ), this.updateQuestions);\n    }\n    this.setState({ isDisabled: true, isHidden: true });\n    if (counter === questionsNumber) {\n      const { history } = this.props;\n      history.push('/feedback');\n    }\n    this.setState({ disabledBtnQuestions: false, stopTimer: false });\n  };\n\n  disableButtons = () => {\n    this.setState({ disabledBtnQuestions: true });\n    const { dispatch } = this.props;\n    const number = 30;\n    dispatch(TimerAction(number));\n    this.setState({ isDisabled: false, isHidden: false, stopTimer: false });\n  }\n\n  render() {\n    const {\n      resultsQuestions,\n      stopTimer,\n      counter,\n      correctAnswer,\n      allQuestions,\n      isDisabled,\n      isHidden } = this.state;\n    const { timer } = this.props;\n    return (\n      <section className='section-game'>\n        <Header />\n        { resultsQuestions.length === 0 ? null\n          : (\n            <div className=\"answers-div\">\n              <h2\n                className=\"question-category\"\n                data-testid=\"question-category\"\n                dangerouslySetInnerHTML={ { __html:\n                  sanitizeHtml(resultsQuestions[counter].category) } }\n              />\n              { correctAnswer === 'Dirk the Daring' ? (\n                <h3\n                  data-testid=\"question-text\"\n                >\n                  {resultsQuestions[counter].question}\n                </h3>)\n                : (\n                  <h3\n                    data-testid=\"question-text\"\n                    dangerouslySetInnerHTML={ { __html:\n                    sanitizeHtml(resultsQuestions[counter].question) } }\n                  />\n                )}\n              <div className=\"answer-options\" data-testid=\"answer-options\">\n                { this.createQuestions(allQuestions, correctAnswer) }\n              </div>\n            </div>\n          )}\n        <button\n          className=\"next-btn\"\n          type=\"button\"\n          name=\"next\"\n          data-testid=\"btn-next\"\n          disabled={ isDisabled }\n          hidden={ isHidden }\n          onClick={ () => { this.clickNextQuestion(); } }\n        >\n          Next\n        </button>\n        <Timer key={ counter } stopTimer={ stopTimer } />\n        { timer === 0 ? this.disableButtons() : null }\n      </section>\n    );\n  }\n}\nconst mapStateToProps = (globalState) => ({\n  token: globalState.token,\n  timer: globalState.timer,\n  score: globalState.player.score,\n  category: globalState.setting.category,\n  difficulty: globalState.setting.difficulty,\n  type: globalState.setting.type,\n})\n\nexport default connect(mapStateToProps)(Game);\n\nGame.propTypes = {\n  token: PropTypes.string.isRequired,\n  timer: PropTypes.number.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getCategorys } from '../Service/service';\nimport { CategoryAction, DifficultyAction, TypeAction } from '../Redux/Actions/index';\n\nclass Settings extends React.Component {\n    state = {\n      categorys: [{ name: 'Choose a category...' }],\n    };\n\n    async componentDidMount() {\n      const results = await getCategorys();\n      const { categorys } = this.state;\n      this.setState({ categorys: [...categorys, ...results.trivia_categories] });\n    }\n\n  createSelectCategory = (categorys) => {\n    console.log(categorys);\n    return (\n    <select onChange={this.handleCategoryChange}>\n      { categorys.map(({id, name}) => (\n        <option name={id} value={id}>{name}</option>\n      ))};\n    </select>\n    )\n  }\n\n  handleCategoryChange = ({target}) => {\n  const { dispatch } = this.props;\n  dispatch(CategoryAction(target.value));\n  }\n\n  handleDifficultyChange = ({target}) => {\n    const { dispatch } = this.props;\n    dispatch(DifficultyAction(target.value));\n    }\n\n    handleTypeChange = ({target}) => {\n      const { dispatch } = this.props;\n      dispatch(TypeAction(target.value));\n      }\n  \n  render() {\n    const { categorys } = this.state;\n    return (\n      <>\n        <h1 className=\"settings-h1\">Settings</h1>\n        { categorys.length !== 0 ? this.createSelectCategory(categorys)\n          : null\n        }\n          <select onChange={ this.handleDifficultyChange}>\n            <option value=\"\">Any Difficulty</option>\n            <option value=\"easy\">Easy</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"hard\">Hard</option>\n          </select>\n          <select onChange={ this.handleTypeChange}>\n            <option value=\"\">Any Type</option>\n            <option value=\"multiple\">Multiple Choice</option>\n            <option value=\"boolean\">True/False</option>\n          </select>\n        <Link to='/game'>\n            <button type=\"button\">Play</button>\n          </Link>\n      </>\n    );\n  }\n}\n\nexport default connect()(Settings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport MD5 from 'crypto-js/md5';\nimport { saveLocalStorageRanking } from '../Service/service';\nimport Header from '../components/Header';\nimport { ResetAction } from '../Redux/Actions/index';\nimport '../style/Feedback.css';\n\nclass Feedback extends React.Component {\n  componentDidMount() {\n    const { name, score, email } = this.props;\n    const picture = `https://www.gravatar.com/avatar/${MD5(email)}`;\n    const object = {\n      name,\n      score,\n      picture,\n    };\n    saveLocalStorageRanking(object);\n  }\n\n  messageNumberOfQuestions = (correctAnswers) => {\n    const couldBeBetter = 3;\n    if (correctAnswers < couldBeBetter) {\n      return <h6 className=\"feedback-message\" data-testid=\"feedback-text\">Could be better...</h6>;\n    }\n    if (correctAnswers >= couldBeBetter) {\n      return <h6 className=\"feedback-message\" data-testid=\"feedback-text\">Well Done!</h6>;\n    }\n  };\n\n  handleClick = () => {\n    const { dispatch } = this.props;\n    dispatch(ResetAction(0));\n  }\n\n  render() {\n    const { rightQuestions, score } = this.props;\n    return (\n      <>\n        <Header />\n        <section className=\"section-feedback\">\n          <h1 className=\"text-feedback-page\" data-testid=\"feedback-text\">Your Score!</h1>\n          <div>\n            <h3\n              className=\"feedback-score\"\n              data-testid=\"feedback-total-score\"\n            >\n              { score }\n            </h3>\n            <div className=\"assertions-div\">\n              <h4 className=\"text-number-acertos\">Right answers: </h4>\n              <h4 data-testid=\"feedback-total-question\">{ rightQuestions }</h4>\n            </div>\n            { this.messageNumberOfQuestions(rightQuestions) }\n          </div>\n          <div className=\"div-buttons-feedback\">\n            <Link\n              to=\"/\"\n            >\n              <button\n                type=\"button\"\n                name=\"button-play-again\"\n                data-testid=\"btn-play-again\"\n                onClick={ this.handleClick }\n              >\n                Play again\n              </button>\n            </Link>\n            <Link\n              to=\"/ranking\"\n            >\n              <button\n                type=\"button\"\n                name=\"button-play-again\"\n                data-testid=\"btn-ranking\"\n              >\n                Ranking\n              </button>\n            </Link>\n          </div>\n        </section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (globalState) => ({\n  rightQuestions: globalState.player.assertions,\n  score: globalState.player.score,\n  name: globalState.player.name,\n  email: globalState.player.gravatarEmail,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n\nFeedback.propTypes = {\n  rightQuestions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { ResetAction } from '../Redux/Actions/index';\nimport '../style/Ranking.css';\n\nclass Ranking extends Component {\n  state = {\n    playersArray: [],\n  }\n\n  componentDidMount() {\n    const players = JSON.parse(localStorage.getItem('ranking'));\n    players.sort((a, b) => b.score - a.score);\n    this.setState({ playersArray: players });\n    const { dispatch } = this.props;\n    dispatch(ResetAction(0));\n  }\n\n  render() {\n    const { playersArray } = this.state;\n    return (\n      <div className=\"ranking-div\">\n        <h1 className=\"ranking-h1\" data-testid=\"ranking-title\">Ranking</h1>\n        <div className=\"ranking-div-allplayers\">\n          { playersArray.length === 0 ? null\n            : (\n              playersArray.map((item, index) => (\n                <div className=\"player-div\" key={ index }>\n                  <div className=\"ranking-name-img\">\n                    <h4 className=\"ranking-h4\" data-testid={ `player-name-${index}` }>{ item.name }</h4>\n                    <img className=\"ranking-img\" src={ item.picture } alt=\"gravatarImg\" />\n                  </div>\n                  <h4 classname='ranking-score' data-testid={ `player-score-${index}` }>{ item.score }</h4>\n                </div>\n              )))}\n        </div>\n        <Link\n          to=\"/\"\n        >\n          <button\n            className='next-btn'\n            type=\"button\"\n            name=\"button-play-again\"\n            data-testid=\"btn-go-home\"\n          >\n            Play Again!\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect()(Ranking);\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" component={ Login } />\n          <div className=\"light-blue\">\n            <Route path=\"/game\" component={ Game } />\n            <Route path=\"/settings\" component={ Settings } />\n            <Route path=\"/feedback\" component={ Feedback } />\n            <Route path=\"/ranking\" component={ Ranking } />\n          </div>\n        </Switch>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_SCORE, PLAYER_INFO, RIGHT_QUESTIONS,\n  RESET_SCORE } from '../Actions/ActionConst';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  gravatarURL: '',\n};\n\nconst playerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case PLAYER_INFO:\n    return {\n      ...state,\n      name: action.payload.name,\n      gravatarEmail: action.payload.email,\n      gravatarURL: action.payload.gravatarURL,\n    };\n  case ADD_SCORE:\n    return {\n      ...state,\n      score: action.payload.score + state.score,\n    };\n  case RESET_SCORE:\n    return {\n      ...state,\n      score: 0,\n    };\n  case RIGHT_QUESTIONS:\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default playerReducer;\n","import { TOKEN_INFO } from '../Actions/ActionConst';\n\nconst INITIAL_STATE = '';\n\nconst tokenReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case TOKEN_INFO:\n    return action.payload;\n  default:\n    return state;\n  }\n};\n\nexport default tokenReducer;\n","import { TIMER } from '../Actions/ActionConst';\n\nconst INITIAL_STATE = 30;\n\nconst timerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case TIMER:\n    return action.payload;\n  default:\n    return state;\n  }\n};\n\nexport default timerReducer;\n","import { ADD_CATEGORY, ADD_DIFFICULTY, ADD_TYPE } from '../Actions/ActionConst';\n\nconst INITIAL_STATE = {\n  category:'',\n  difficulty: '',\n  type: '',\n};\n\nconst settingReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case ADD_CATEGORY:\n    return {\n      ...state,\n      category: action.payload,\n    };\n    case ADD_DIFFICULTY:\n    return {\n      ...state,\n      difficulty: action.payload,\n    };\n    case ADD_TYPE:\n      return {\n        ...state,\n        type: action.payload,\n      };\n  default:\n    return state;\n  }\n};\n\nexport default settingReducer;\n","import { combineReducers } from 'redux';\nimport playerReducer from './playerReducer';\nimport tokenReducer from './tokenReducer';\nimport timerReducer from './timerReducer';\nimport settingReducer from './settingReducer';\n\nconst rootReducer = combineReducers(\n  {\n    player: playerReducer, token: tokenReducer, timer: timerReducer, setting: settingReducer,\n  },\n);\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../Reducer/rootReducer';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './Redux/Store/index';\n\nReactDOM.render(\n  <BrowserRouter basename={ process.env.PUBLIC_URL }>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";"],"sourceRoot":""}